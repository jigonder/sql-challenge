{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import dependencies\n",
    "\n",
    "import urllib.parse\n",
    "from sqlalchemy import create_engine\n",
    "import os\n",
    "from config import password\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create connection to engine\n",
    "\n",
    "engine = create_engine(f\"postgresql://postgres:{password}@localhost:5432/sql_challenge\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "connection = engine.connect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create data frames\n",
    "# SALARIES\n",
    "salary_df = pd.read_sql(\"salaries\", connection)\n",
    "# EMPLOYEES\n",
    "employee_df = pd.read_sql(\"employees\", connection)\n",
    "# DEPARTMENTS\n",
    "department_df = pd.read_sql(\"departments\", connection)\n",
    "# DEPARTMENT EMPLOYEES\n",
    "dept_emp_df = pd.read_sql(\"department_employees\", connection)\n",
    "# DEPARTMENT MANAGER\n",
    "dept_manager_df = pd.read_sql(\"department_manager\", connection)\n",
    "#TITLES\n",
    "titles_df = pd.read_sql(\"titles\", connection)\n",
    "titles_df = titles_df.rename(columns={\"title_id\": \"emp_title\",\n",
    "                        \"title\": \"title\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# merge dataframes\n",
    "\n",
    "merged_df = pd.merge(salary_df, employee_df, on = \"emp_no\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>emp_no</th>\n",
       "      <th>salary</th>\n",
       "      <th>emp_title</th>\n",
       "      <th>birth_date</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>sex</th>\n",
       "      <th>hire_date</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10001</td>\n",
       "      <td>60117.0</td>\n",
       "      <td>e0003</td>\n",
       "      <td>1953-09-02</td>\n",
       "      <td>Georgi</td>\n",
       "      <td>Facello</td>\n",
       "      <td>M</td>\n",
       "      <td>1986-06-26</td>\n",
       "      <td>Senior Engineer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10003</td>\n",
       "      <td>40006.0</td>\n",
       "      <td>e0003</td>\n",
       "      <td>1959-12-03</td>\n",
       "      <td>Parto</td>\n",
       "      <td>Bamford</td>\n",
       "      <td>M</td>\n",
       "      <td>1986-08-28</td>\n",
       "      <td>Senior Engineer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10004</td>\n",
       "      <td>40054.0</td>\n",
       "      <td>e0003</td>\n",
       "      <td>1954-05-01</td>\n",
       "      <td>Chirstian</td>\n",
       "      <td>Koblick</td>\n",
       "      <td>M</td>\n",
       "      <td>1986-12-01</td>\n",
       "      <td>Senior Engineer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10006</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>e0003</td>\n",
       "      <td>1953-04-20</td>\n",
       "      <td>Anneke</td>\n",
       "      <td>Preusig</td>\n",
       "      <td>F</td>\n",
       "      <td>1989-06-02</td>\n",
       "      <td>Senior Engineer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10009</td>\n",
       "      <td>60929.0</td>\n",
       "      <td>e0003</td>\n",
       "      <td>1952-04-19</td>\n",
       "      <td>Sumant</td>\n",
       "      <td>Peac</td>\n",
       "      <td>F</td>\n",
       "      <td>1985-02-18</td>\n",
       "      <td>Senior Engineer</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   emp_no   salary emp_title birth_date first_name last_name sex  hire_date  \\\n",
       "0   10001  60117.0     e0003 1953-09-02     Georgi   Facello   M 1986-06-26   \n",
       "1   10003  40006.0     e0003 1959-12-03      Parto   Bamford   M 1986-08-28   \n",
       "2   10004  40054.0     e0003 1954-05-01  Chirstian   Koblick   M 1986-12-01   \n",
       "3   10006  40000.0     e0003 1953-04-20     Anneke   Preusig   F 1989-06-02   \n",
       "4   10009  60929.0     e0003 1952-04-19     Sumant      Peac   F 1985-02-18   \n",
       "\n",
       "             Title  \n",
       "0  Senior Engineer  \n",
       "1  Senior Engineer  \n",
       "2  Senior Engineer  \n",
       "3  Senior Engineer  \n",
       "4  Senior Engineer  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df = pd.merge(merged_df, titles_df, on = \"emp_title\")\n",
    "final_df = final_df.rename(columns={\"title\": \"Title\"})\n",
    "final_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>emp_no</th>\n",
       "      <th>salary</th>\n",
       "      <th>emp_title</th>\n",
       "      <th>birth_date</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>sex</th>\n",
       "      <th>hire_date</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>299999</th>\n",
       "      <td>499942</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>e0004</td>\n",
       "      <td>1963-01-10</td>\n",
       "      <td>April</td>\n",
       "      <td>Foolsday</td>\n",
       "      <td>F</td>\n",
       "      <td>1997-02-10</td>\n",
       "      <td>Technique Leader</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        emp_no   salary emp_title birth_date first_name last_name sex  \\\n",
       "299999  499942  40000.0     e0004 1963-01-10      April  Foolsday   F   \n",
       "\n",
       "        hire_date             Title  \n",
       "299999 1997-02-10  Technique Leader  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Epilogue Answer - Find my Employee Number - APRIL FOOLS :)\n",
    "final_df.loc[final_df['emp_no'] == 499942]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# histogram of most common salary ranges\n",
    "\n",
    "plt.hist(salary_df[\"salary\"])\n",
    "plt.savefig('Images/histogram.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# average salary bar graph\n",
    "\n",
    "avg_salary_df = final_df.groupby(final_df[\"Title\"])[\"salary\"].mean()\n",
    "avg_salary_df.plot(kind = \"bar\", legend=True)\n",
    "plt.xlabel(\"Job Title\")\n",
    "plt.xticks(rotation = 45)\n",
    "plt.ylabel(\"Average Salary\")\n",
    "plt.show()\n",
    "plt.savefig('Images/bar.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
